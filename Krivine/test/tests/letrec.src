// OUTPUT: 3628800
(letrec (f x)
    (if (< x 1)
        1
        (* (f (- x 1)) x))
    (f 10))


// OUTPUT: [6 10 14]
(letrec (map f xs)
 (if (= xs nil)
   nil
   (cons (f (car xs)) (map f (cdr xs))))

(let (double x) (* x 2)

(map double [3 5 7])))


// OUTPUT: [4 23 840]
(letrec (fold f init xs)
 (if (= xs nil)
   init
   (f (car xs) (fold f init (cdr xs))))

(let (len xs) (fold (lambda (x acc) (+ acc 1)) 0 xs)
(let (sum xs) (fold (lambda (x acc) (+ acc x)) 0 xs)
(let (prod xs) (fold (lambda (x acc) (* acc x)) 1 xs)

(let list [3 5 7 8]

[(len list) (sum list) (prod list)] )))))
